{"version":3,"sources":["components/SideNav.js","components/NavBar.js","libs/utils.js","libs/busses.js","components/BusTable.js","containers/Home.js","components/StopsList.js","containers/UserStops.js","Routes.js","App.js","serviceWorker.js","index.js"],"names":["components_SideNav","_ref","links","_ref$closeNav","closeNav","document","querySelector","click","react_default","a","createElement","Fragment","map","link","key","onClick","Link","to","href","name","components_NavBar","_ref$className","className","props","Object","objectWithoutProperties","lib","assign","concat","alignLinks","brand","sidenav","timeUntil","time","now","arguments","length","undefined","Date","mins","Math","round","writeUserData","data","window","localStorage","setItem","JSON","stringify","readUserData","storage","getItem","parse","userData","stopCodePattern","RegExp","getRawArrivals","asyncToGenerator","regenerator_default","mark","_callee","smsCode","search","stopId","wrap","_context","prev","next","$","sent","matches","id","abrupt","stop","_x","apply","this","parseRawArrivals","rawArrivals","arrivals","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","Symbol","iterator","done","arrival","value","destination","routeNumber","expectedArrival","timeUntilArrival","timeUntilArrivalString","push","err","return","sort","b","components_BusTable","data-field","Home","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","handleChange","event","setState","defineProperty","target","handleSubmit","parsedArrivals","isLoading","state","stopCode","validateStopCode","test","userHasSubmitted","URL","location","searchParams","get","then","label","onChange","type","waves","disabled","right","color","Component","components_StopsList","stops","deleteStop","stopName","ev","preventDefault","UserStops","saveStops","random","toString","replace","getTime","toConsumableArray","console","log","filter","validateForm","userStops","hasOwnProperty","_this2","addEventListener","Routes","Switch","Route","path","exact","component","App","navLinks","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","BrowserRouter","basename","src_App_0","getElementById","process","origin","fetch","response","contentType","headers","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.ab1b6ea5.chunk.js","sourcesContent":["import React from 'react';\r\nimport 'materialize-css/dist/css/materialize.css';\r\nimport './SideNav.scss';\r\nimport {Link} from \"react-router-dom\";\r\n\r\nexport default ({\r\n    links,\r\n    // react-materialize unfortunately does not provide a way to programmatically close the sidenav, so we simulate\r\n    // a click on the sidenav overlay in order to get it to close\r\n    closeNav = () => document.querySelector('.sidenav-overlay').click()\r\n}) => {\r\n    return <>{\r\n        links.map((link, key) => {\r\n            return (\r\n                <li key={key} onClick={closeNav}>\r\n                    <Link to={link.href}>{link.name}</Link>\r\n                </li>\r\n            )\r\n        })\r\n    }</>\r\n}\r\n","import React from 'react';\r\nimport 'materialize-css/dist/css/materialize.css';\r\nimport './NavBar.scss';\r\nimport Link from \"react-router-dom/es/Link\";\r\nimport { Navbar } from 'react-materialize';\r\nimport SideNav from \"./SideNav\";\r\n\r\nexport default ({\r\n    links,\r\n    className=\"\",\r\n    ...props\r\n}) =>\r\n    <Navbar\r\n        className={`red darken-3 ${className}`}\r\n        alignLinks=\"right\"\r\n        brand={\r\n            <Link to=\"/\">Where's My Bloody Bus!?</Link>\r\n        }\r\n        sidenav={<SideNav links={links}/>}\r\n        {...props}\r\n    >\r\n        {links.map((link, key) => {\r\n            return <Link key={key} to={link.href}>{link.name}</Link>\r\n        })}\r\n    </Navbar>\r\n","/**\r\n * Gets the time until a given datetime\r\n * @param {String} time - A datetime string\r\n * @param {Date} now = new Date() - Optionally, the time to use as the current time\r\n * @returns {Number} The time until the given time, rounded to the nearest minute\r\n */\r\nexport const timeUntil = (time, now = new Date()) => {\r\n    const then = new Date(time);\r\n    const difference = then - now;\r\n    const mins = difference / 1000 / 60;\r\n    return Math.round(mins);\r\n};\r\n\r\n/**\r\n * Writes user data to local storage\r\n * @param {Object} data\r\n */\r\nexport const writeUserData = (data) => {\r\n    window.localStorage.setItem('userData', JSON.stringify(data));\r\n};\r\n\r\n/**\r\n * Reads user data from local storage\r\n * @returns {Object}\r\n */\r\nexport const readUserData = () => {\r\n    const storage = window.localStorage;\r\n\r\n    // Create a user data object on local storage if one doesn't already exist\r\n    if (!storage.getItem('userData')) {\r\n        writeUserData({});\r\n    }\r\n\r\n    return JSON.parse(storage.userData);\r\n};\r\n\r\nexport const saveStop = (stopName, stopCode) => {\r\n    const userData = readUserData();\r\n\r\n    if (!userData.hasOwnProperty('stops')) {\r\n        userData.stops = [];\r\n    }\r\n\r\n    userData.stops.push({\r\n        stopName,\r\n        stopCode\r\n    });\r\n\r\n    writeUserData(userData);\r\n};\r\n\r\nexport const stopCodePattern = new RegExp('^[0-9]{5}$');\r\n","import * as $ from 'jquery';\r\nimport {timeUntil} from \"./utils\";\r\n\r\n/**\r\n * getArrivals() gets the raw arrivals data for a specific bus stop\r\n * @param {String} smsCode The smsCode of a particular bus stop\r\n * @returns {Object}\r\n */\r\nexport const getRawArrivals = async (smsCode) => {\r\n    const search = await $.getJSON(`https://api.tfl.gov.uk/StopPoint/Search/${smsCode}`);\r\n    const stopId = search.matches[0].id;\r\n    return await $.getJSON(`https://api.tfl.gov.uk/StopPoint/${stopId}/Arrivals`);\r\n};\r\n\r\n/**\r\n * Parses and sorts raw arrival data into a list of object with route numbers, destinations, and times until arrival\r\n * @param {Object} rawArrivals\r\n * @returns {Object[]}\r\n */\r\nexport const parseRawArrivals = (rawArrivals) => {\r\n    const arrivals = [];\r\n    for (const arrival of rawArrivals) {\r\n        const destination = arrival[\"destinationName\"];\r\n        const routeNumber = arrival[\"lineName\"];\r\n        const expectedArrival = arrival[\"expectedArrival\"];\r\n\r\n        let timeUntilArrival = timeUntil(expectedArrival);\r\n        timeUntilArrival = timeUntilArrival > -1 ? timeUntilArrival : 0;\r\n        let timeUntilArrivalString;\r\n        if (timeUntilArrival === 0) {\r\n            timeUntilArrivalString = 'Due';\r\n        } else {\r\n            timeUntilArrivalString = `${timeUntilArrival} min${timeUntilArrival === 1 ? '' : 's'}`;\r\n        }\r\n\r\n        arrivals.push({\r\n            destination,\r\n            routeNumber,\r\n            timeUntilArrival,\r\n            timeUntilArrivalString\r\n        });\r\n    }\r\n\r\n    return arrivals.sort((a, b) => a.timeUntilArrival - b.timeUntilArrival);\r\n};","import React from 'react';\r\nimport {Table} from \"react-materialize\";\r\nimport 'materialize-css/dist/css/materialize.css';\r\nimport './BusTable.scss';\r\n\r\nexport default ({\r\n    className=\"\",\r\n    arrivals,\r\n    ...props\r\n}) =>\r\n    <Table className={className} {...props}>\r\n        <thead>\r\n        <tr>\r\n            <th data-field=\"route\">\r\n                Route\r\n            </th>\r\n            <th data-field=\"destination\">\r\n                Destination\r\n            </th>\r\n            <th data-field=\"time\">\r\n                Time\r\n            </th>\r\n        </tr>\r\n        </thead>\r\n        <tbody>\r\n        {arrivals.map((arrival, key) => {\r\n            return (\r\n                <tr key={key}>\r\n                    <td>{arrival.routeNumber}</td>\r\n                    <td>{arrival.destination}</td>\r\n                    <td>{arrival.timeUntilArrivalString}</td>\r\n                </tr>\r\n            )\r\n        })}\r\n        </tbody>\r\n    </Table>","import React, { Component } from \"react\";\r\nimport 'jquery';\r\nimport 'materialize-css/dist/js/materialize.js';\r\nimport 'materialize-css/dist/css/materialize.css';\r\nimport './Home.scss';\r\nimport {TextInput, Button, Preloader, Row, Icon} from 'react-materialize';\r\nimport {getRawArrivals, parseRawArrivals} from '../libs/busses'\r\nimport {stopCodePattern} from \"../libs/utils\";\r\nimport BusTable from \"../components/BusTable\";\r\n\r\nexport default class Home extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            stopCode: '',\r\n            isLoading: false,\r\n            userHasSubmitted: false,\r\n            arrivals: []\r\n        };\r\n\r\n        const url = new URL(document.location.href);\r\n        const stopCode = url.searchParams.get('stopCode');\r\n        if (stopCode !== null) {\r\n            this.state.stopCode = stopCode;\r\n            this.handleSubmit().then();\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n\r\n    }\r\n\r\n    handleChange = (event) => {\r\n        this.setState({\r\n            [event.target.id]: event.target.value\r\n        });\r\n    };\r\n\r\n    handleSubmit = async () => {\r\n        this.setState({\r\n            arrivals: [],\r\n            isLoading: true\r\n        });\r\n\r\n        const rawArrivals = await getRawArrivals(this.state.stopCode);\r\n        const parsedArrivals = parseRawArrivals(rawArrivals);\r\n\r\n        this.setState({\r\n            arrivals: parsedArrivals,\r\n            isLoading: false\r\n        });\r\n    };\r\n\r\n    validateStopCode = () => {\r\n        return stopCodePattern.test(this.state.stopCode);\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"Home\">\r\n                <TextInput\r\n                    label=\"Bus Stop Code\"\r\n                    className=\"no-helper\"\r\n                    id=\"stopCode\"\r\n                    onChange={this.handleChange}\r\n                    value={this.state.stopCode}\r\n                    type=\"number\"\r\n                />\r\n\r\n                <Button\r\n                    waves=\"light\"\r\n                    className=\"red darken-3\"\r\n                    onClick={this.handleSubmit}\r\n                    disabled={!this.validateStopCode()}\r\n                >Submit <Icon right>send</Icon></Button>\r\n\r\n                {this.state.isLoading &&\r\n                    <Row className=\"center-align\">\r\n                        <Preloader\r\n                            color=\"red\"\r\n                        />\r\n                    </Row>\r\n                }\r\n\r\n                {this.state.arrivals.length > 0 &&\r\n                    <BusTable arrivals={this.state.arrivals} />\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React from 'react';\r\nimport 'materialize-css/dist/css/materialize.css';\r\nimport {Collection} from 'react-materialize';\r\nimport './StopsList.scss';\r\nimport Link from \"react-router-dom/es/Link\";\r\n\r\nexport default ({\r\n    stops,\r\n    className=\"\",\r\n    deleteStop,\r\n    ...props\r\n}) =>\r\n    <Collection className={className} {...props}>\r\n        {stops.map((stop, key) => {\r\n            return (\r\n                <Link to={`/?stopCode=${stop.stopCode}`} className=\"collection-item black-text\" key={key}>\r\n                    {stop.stopName}\r\n                    <i\r\n                        className=\"material-icons red-text text-darken-3 secondary-content\"\r\n                        onClick={(ev) => {\r\n                            ev.preventDefault();\r\n                            deleteStop(stop.id)\r\n                        }}\r\n                    >close</i>\r\n                </Link>\r\n            )\r\n        })}\r\n    </Collection>\r\n","import React, { Component } from \"react\";\r\nimport 'jquery';\r\nimport 'materialize-css/dist/js/materialize.js';\r\nimport 'materialize-css/dist/css/materialize.css';\r\nimport './UserStops.scss';\r\nimport {TextInput, Button, Icon} from 'react-materialize';\r\nimport {readUserData, stopCodePattern, writeUserData} from \"../libs/utils\";\r\nimport StopsList from \"../components/StopsList\";\r\n\r\nexport default class UserStops extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        const userData = readUserData();\r\n        const userStops = userData.hasOwnProperty('stops') ? userData.stops : [];\r\n\r\n        this.state = {\r\n            stopName: '',\r\n            stopCode: '',\r\n            stops: userStops\r\n        };\r\n    }\r\n\r\n    saveStops = () => {\r\n        const userData = readUserData();\r\n        userData.stops = this.state.stops;\r\n        writeUserData(userData);\r\n    };\r\n\r\n    componentDidMount() {\r\n        console.log(this.state);\r\n\r\n        window.addEventListener('unload', () => {\r\n            this.saveStops();\r\n        });\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this.saveStops();\r\n    }\r\n\r\n    handleChange = (event) => {\r\n        this.setState({\r\n            [event.target.id]: event.target.value\r\n        });\r\n    };\r\n\r\n    handleSubmit = () => {\r\n        const stop = {\r\n            stopName: this.state.stopName,\r\n            stopCode: this.state.stopCode,\r\n            id: `${Math.random().toString().replace('0.', '')}_${new Date().getTime()}`\r\n        };\r\n\r\n        this.setState({\r\n            stops: [...this.state.stops, stop],\r\n            stopName: '',\r\n            stopCode: ''\r\n        });\r\n        console.log(readUserData())\r\n    };\r\n\r\n    deleteStop = (id) => {\r\n        console.log(id);\r\n\r\n        const stops = this.state.stops.filter(stop => {\r\n            return stop.id !== id;\r\n        });\r\n\r\n        this.setState({stops});\r\n    };\r\n\r\n    validateForm = () => {\r\n        return stopCodePattern.test(this.state.stopCode) && this.state.stopName.length > 0;\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"UserStops\">\r\n                <h4>Add a stop</h4>\r\n\r\n                <TextInput\r\n                    label=\"Name\"\r\n                    id=\"stopName\"\r\n                    onChange={this.handleChange}\r\n                    value={this.state.stopName}\r\n                    type=\"text\"\r\n                />\r\n\r\n                <TextInput\r\n                    label=\"Stop Code\"\r\n                    id=\"stopCode\"\r\n                    onChange={this.handleChange}\r\n                    value={this.state.stopCode}\r\n                    type=\"number\"\r\n                />\r\n\r\n                <Button\r\n                    waves=\"light\"\r\n                    className=\"red darken-3\"\r\n                    onClick={this.handleSubmit}\r\n                    disabled={!this.validateForm()}\r\n                >Add <Icon right>add</Icon></Button>\r\n\r\n                <div className=\"divider\" />\r\n\r\n                <h4>My Stops</h4>\r\n\r\n                {this.state.stops.length > 0 ?\r\n                    <StopsList stops={this.state.stops} deleteStop={this.deleteStop}/>\r\n                    :\r\n                    <h6>You don't have any saved stops yet :(</h6>\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport { Route, Switch } from \"react-router-dom\";\r\nimport Home from \"./containers/Home\";\r\nimport UserStops from \"./containers/UserStops\";\r\n\r\nexport default () =>\r\n    <Switch>\r\n        <Route path=\"/\" exact component={Home} />\r\n        <Route path=\"/user-stops\" exact component={UserStops}/>\r\n    </Switch>;\r\n","import React, { Component } from 'react';\r\nimport 'jquery';\r\nimport 'materialize-css/dist/js/materialize.js';\r\nimport 'materialize-css/dist/css/materialize.css';\r\nimport './App.scss';\r\nimport { Container} from 'react-materialize';\r\nimport NavBar from './components/NavBar';\r\nimport Routes from './Routes';\r\n\r\nclass App extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            navLinks: [\r\n                {\r\n                    name: \"Home\",\r\n                    href: \"/\"\r\n                },\r\n                {\r\n                    name: \"My Stops\",\r\n                    href: \"/user-stops\"\r\n                }\r\n            ]\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"App app-container\">\r\n                <NavBar links={this.state.navLinks}/>\r\n                <Container>\r\n                    <Routes />\r\n                </Container>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport {BrowserRouter as Router} from \"react-router-dom\";\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n    <Router basename=\"/WMBB\">\r\n        <App />\r\n    </Router>,\r\n    document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.register();\r\n"],"sourceRoot":""}
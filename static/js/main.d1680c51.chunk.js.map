{"version":3,"sources":["libs/utils.js","libs/busses.js","containers/Home.js","Routes.js","App.js","serviceWorker.js","index.js"],"names":["timeUntil","time","now","arguments","length","undefined","Date","mins","Math","round","getRawArrivals","_ref","Object","asyncToGenerator","regenerator_default","a","mark","_callee","smsCode","search","stopId","wrap","_context","prev","next","$","concat","sent","matches","id","abrupt","stop","_x","apply","this","parseRawArrivals","rawArrivals","arrivals","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","Symbol","iterator","done","arrival","value","destination","routeNumber","expectedArrival","timeUntilArrival","timeUntilArrivalString","push","err","return","sort","b","Home","props","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","handleChange","event","setState","defineProperty","target","handleSubmit","parsedArrivals","isLoading","state","stopCode","validateStopCode","RegExp","test","userHasSubmitted","react_default","createElement","className","lib","label","onChange","waves","onClick","disabled","type","right","color","data-field","map","Component","Routes","Switch","Route","path","exact","component","App","href","Boolean","window","location","hostname","match","ReactDOM","render","BrowserRouter","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d1680c51.chunk.js","sourcesContent":["/**\n * Gets the time until a given datetime\n * @param {String} time - A datetime string\n * @param {Date} now = new Date() - Optionally, the time to use as the current time\n * @returns {Number} The time until the given time, rounded to the nearest minute\n */\nexport const timeUntil = (time, now = new Date()) => {\n    const then = new Date(time);\n    const difference = then - now;\n    const mins = difference / 1000 / 60;\n    return Math.round(mins);\n};","import * as $ from 'jquery';\nimport {timeUntil} from \"./utils\";\n\n/**\n * getArrivals() gets the raw arrivals data for a specific bus stop\n * @param {String} smsCode The smsCode of a particular bus stop\n * @returns {Object}\n */\nexport const getRawArrivals = async (smsCode) => {\n    const search = await $.getJSON(`https://api.tfl.gov.uk/StopPoint/Search/${smsCode}`);\n    const stopId = search.matches[0].id;\n    return await $.getJSON(`https://api.tfl.gov.uk/StopPoint/${stopId}/Arrivals`);\n};\n\n/**\n * Parses and sorts raw arrival data into a list of object with route numbers, destinations, and times until arrival\n * @param {Object} rawArrivals\n * @returns {Object[]}\n */\nexport const parseRawArrivals = (rawArrivals) => {\n    const arrivals = [];\n    for (const arrival of rawArrivals) {\n        const destination = arrival[\"destinationName\"];\n        const routeNumber = arrival[\"lineName\"];\n        const expectedArrival = arrival[\"expectedArrival\"];\n\n        let timeUntilArrival = timeUntil(expectedArrival);\n        timeUntilArrival = timeUntilArrival > -1 ? timeUntilArrival : 0;\n        let timeUntilArrivalString;\n        if (timeUntilArrival === 0) {\n            timeUntilArrivalString = 'Due';\n        } else {\n            timeUntilArrivalString = `${timeUntilArrival} min${timeUntilArrival === 1 ? '' : 's'}`;\n        }\n\n        arrivals.push({\n            destination,\n            routeNumber,\n            timeUntilArrival,\n            timeUntilArrivalString\n        });\n    }\n\n    return arrivals.sort((a, b) => a.timeUntilArrival - b.timeUntilArrival);\n};","import React, { Component } from \"react\";\nimport 'jquery';\nimport 'materialize-css/dist/js/materialize.js';\nimport 'materialize-css/dist/css/materialize.css';\nimport './Home.scss';\nimport {TextInput, Button, Preloader, Row, Icon, Table} from 'react-materialize';\nimport {getRawArrivals, parseRawArrivals} from '../libs/busses'\n\nexport default class Home extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            stopCode: '',\n            isLoading: false,\n            userHasSubmitted: false,\n            arrivals: []\n        };\n    }\n\n    handleChange = (event) => {\n        this.setState({\n            [event.target.id]: event.target.value\n        });\n    };\n\n    handleSubmit = async () => {\n        this.setState({\n            arrivals: [],\n            isLoading: true\n        });\n\n        const rawArrivals = await getRawArrivals(this.state.stopCode);\n        const parsedArrivals = parseRawArrivals(rawArrivals);\n\n        this.setState({\n            arrivals: parsedArrivals,\n            isLoading: false\n        });\n    };\n\n    validateStopCode = () => {\n        const stopCodePattern = new RegExp('^[0-9]{5}$');\n        return stopCodePattern.test(this.state.stopCode);\n    };\n\n    render() {\n        return (\n            <div className=\"Home\">\n                <TextInput\n                    label=\"Bus Stop Code\"\n                    className=\"no-helper\"\n                    id=\"stopCode\"\n                    onChange={this.handleChange}\n                    value={this.state.stopCode}\n                />\n\n                <Button\n                    waves=\"light\"\n                    className=\"red darken-3\"\n                    onClick={this.handleSubmit}\n                    disabled={!this.validateStopCode()}\n                    type=\"number\"\n                >Submit <Icon right>send</Icon></Button>\n\n                {this.state.isLoading &&\n                    <Row className=\"center-align\">\n                        <Preloader\n                            color=\"red\"\n                        />\n                    </Row>\n                }\n\n                {this.state.arrivals.length > 0 &&\n                    <Table>\n                        <thead>\n                        <tr>\n                            <th data-field=\"route\">\n                                Route\n                            </th>\n                            <th data-field=\"destination\">\n                                Destination\n                            </th>\n                            <th data-field=\"time\">\n                                Time\n                            </th>\n                        </tr>\n                        </thead>\n                        <tbody>\n                            {this.state.arrivals.map((arrival) => {\n                                return (\n                                    <tr>\n                                        <td>{arrival.routeNumber}</td>\n                                        <td>{arrival.destination}</td>\n                                        <td>{arrival.timeUntilArrivalString}</td>\n                                    </tr>\n                                )\n                            })}\n                        </tbody>\n                    </Table>\n                }\n            </div>\n        );\n    }\n}\n","import React from \"react\";\nimport { Route, Switch } from \"react-router-dom\";\nimport Home from \"./containers/Home\";\n\nexport default () =>\n    <Switch>\n        <Route path=\"/\" exact component={Home} />\n    </Switch>;\n","import React, { Component } from 'react';\nimport 'jquery';\nimport 'materialize-css/dist/js/materialize.js';\nimport 'materialize-css/dist/css/materialize.css';\nimport './App.scss';\nimport { Container } from 'react-materialize';\nimport Routes from './Routes';\n\nclass App extends Component {\n    render() {\n        return (\n            <div className=\"App app-container\">\n                <nav>\n                    <div className=\"nav-wrapper red darken-3\">\n                        <Container>\n                            <a href=\"/\" className=\"breadcrumb\">Where's My Bloody Bus!?</a>\n                        </Container>\n                    </div>\n                </nav>\n                <Container>\n                    <Routes />\n                </Container>\n            </div>\n        );\n    }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport {BrowserRouter as Router} from \"react-router-dom\";\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <Router>\n        <App />\n    </Router>,\n    document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}